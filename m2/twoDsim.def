(* Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013, 2014
                 Free Software Foundation, Inc. *)
(* This file is part of GNU Modula-2.

GNU Modula-2 is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3, or (at your option) any later
version.

GNU Modula-2 is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with gm2; see the file COPYING.  If not, write to the Free Software
Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. *)

DEFINITION MODULE twoDsim ;

(*
    Title      : twoDsim
    Author     : Gaius Mulley
    System     : GNU Modula-2
    Date       : Fri Jun 13 13:22:12 2008
    Revision   : $Version$
    Description: implements a very simple two dimensional physical
                 simulation world.
*)

FROM SYSTEM IMPORT ADDRESS ;
FROM deviceIf IMPORT Colour ;
FROM history IMPORT whereHit, springPoint ;


(*
   gravity - turn on gravity at: g m^2
*)

PROCEDURE gravity (g: REAL) ;


(*
   box - place a box in the world at (x0,y0), (x0+i,y0),
         (x0+i, y0+j), (x0, y0+j).
*)

PROCEDURE box (x0, y0, i, j: REAL; colour: Colour) : CARDINAL ;


(*
   poly3 - place a triangle in the world at:
           (x0,y0),(x1,y1),(x2,y2)
*)

PROCEDURE poly3 (x0, y0, x1, y1, x2, y2: REAL; colour: Colour) : CARDINAL ;


(*
   poly4 - place a quadrangle in the world at:
           (x0,y0), (x1,y1), (x2,y2), (x3,y3)  the points must be in order,
           either anticlockwise or clockwise.
*)

PROCEDURE poly4 (x0, y0, x1, y1, x2, y2, x3, y3: REAL; colour: Colour) : CARDINAL ;


(*
   poly5 - place a pentagon in the world at:
           (x0,y0), (x1,y1), (x2,y2), (x3,y3), (x4,y4)
           the points must be in order, either anticlockwise or clockwise.
*)

PROCEDURE poly5 (x0, y0, x1, y1, x2, y2, x3, y3, x4, y4: REAL; colour: Colour) : CARDINAL ;


(*
   poly6 - place a hexagon in the world at:
           (x0,y0), (x1,y1), (x2,y2), (x3,y3), (x4,y4), (x5,y5)
           the points must be in order, either anticlockwise or clockwise.
*)

PROCEDURE poly6 (x0, y0, x1, y1, x2, y2, x3, y3, x4, y4, x5, y5: REAL; colour: Colour) : CARDINAL ;


(*
   get_xpos - returns the first point, x, coordinate of object.
*)

PROCEDURE get_xpos (id: CARDINAL) : REAL ;


(*
   get_ypos - returns the first point, y, coordinate of object.
*)

PROCEDURE get_ypos (id: CARDINAL) : REAL ;


(*
   get_xvel - returns the x velocity of object.
*)

PROCEDURE get_xvel (id: CARDINAL) : REAL ;


(*
   get_yvel - returns the y velocity of object.
*)

PROCEDURE get_yvel (id: CARDINAL) : REAL ;


(*
   get_xaccel - returns the x acceleration of object.
*)

PROCEDURE get_xaccel (id: CARDINAL) : REAL ;


(*
   get_yaccel - returns the y acceleration of object.
*)

PROCEDURE get_yaccel (id: CARDINAL) : REAL ;


(*
   put_xvel - assigns the x velocity of object.
*)

PROCEDURE put_xvel (id: CARDINAL; r: REAL) ;


(*
   put_yvel - assigns the y velocity of object.
*)

PROCEDURE put_yvel (id: CARDINAL; r: REAL) ;


(*
   put_xaccel - assigns the x acceleration of object.
*)

PROCEDURE put_xaccel (id: CARDINAL; r: REAL) ;


(*
   put_yaccel - assigns the y acceleration of object.
*)

PROCEDURE put_yaccel (id: CARDINAL; r: REAL) ;


(*
   apply_impulse - apply an impulse to object, id,
                   along the vector [x, y] with magnitude, m.
                   Nothing happens if the object is fixed.
                   Currently only circles can have impulses
                   applied.
*)

PROCEDURE apply_impulse (id: CARDINAL; x, y: REAL; m: REAL) ;


(*
   moving_towards - returns TRUE if object, id, is moving towards
                    a point x, y.
*)

PROCEDURE moving_towards (id: CARDINAL; x, y: REAL) : BOOLEAN ;


(*
   set_colour - set the colour of object, id, to colour.
                id must be a box or circle.
*)

PROCEDURE set_colour (id: CARDINAL; colour: Colour) ;


(*
   set_gravity - set the gravity of object, id, to, g.
                 id must be a box or circle.
*)

PROCEDURE set_gravity (id: CARDINAL; g: REAL) ;


(*
   get_gravity - return the gravity of object, id.
                 id must be a box or circle.
*)

PROCEDURE get_gravity (id: CARDINAL) : REAL ;


(*
   get_visible - returns the visibility of an object id.
*)

PROCEDURE get_visible (id: CARDINAL) : BOOLEAN ;


(*
   set_visible - sets the visibility of an object id.
*)

PROCEDURE set_visible (id: CARDINAL; value: BOOLEAN) ;


(*
   get_mass - returns the mass of object, id.
*)

PROCEDURE get_mass (id: CARDINAL) : REAL ;


(*
   mass - specify the mass of an object and return the, id.
*)

PROCEDURE mass (id: CARDINAL; m: REAL) : CARDINAL ;


(*
   fix - fix the object to the world.
*)

PROCEDURE fix (id: CARDINAL) : CARDINAL ;


(*
   unfix - unfix the object from the world.
*)

PROCEDURE unfix (id: CARDINAL) : CARDINAL ;


(*
   spring - join object, id1, and, id2, with a string of defined
            by hooks constant, k, the spring is at rest if it has
            length, l.  If l < 0 then the game engine considers
            the spring to naturally be at rest for the distance
            between id1 and id2.  The parameter, d, is used to
            calculate the damping force.
*)

PROCEDURE spring (id1, id2: CARDINAL; k, d, l: REAL) : CARDINAL ;


(*
   draw_spring - draw spring, id, using colour, c, and a width, w.
*)

PROCEDURE draw_spring (id: CARDINAL; c: CARDINAL; w: REAL) ;


(*
   end_spring - draw the spring using colour, c, when it reaches the end.
*)

PROCEDURE end_spring (id: CARDINAL; c: CARDINAL) ;


(*
   mid_spring - when the string reaches its rest point draw the objects
                connected.
*)

PROCEDURE mid_spring (id: CARDINAL; c: CARDINAL) ;


(*
   when_spring - when the spring, id, reaches, length call, func.
*)

PROCEDURE when_spring (id: CARDINAL; length: REAL; func: CARDINAL) ;


(*
   circle - adds a circle to the world.  Center
            defined by: x0, y0 radius, radius.
*)

PROCEDURE circle (x0, y0, radius: REAL; colour: Colour) : CARDINAL ;


(*
   velocity - give an object, id, a velocity, vx, vy.
*)

PROCEDURE velocity (id: CARDINAL; vx, vy: REAL) : CARDINAL ;


(*
   accel - give an object, id, an acceleration, ax, ay.
*)

PROCEDURE accel (id: CARDINAL; ax, ay: REAL) : CARDINAL ;


(*
   rotate - gives object, id, an initial orientation.
*)

PROCEDURE rotate (id: CARDINAL; angle: REAL) : CARDINAL ;


(*
   rvel - gives object, id, an angular velocity, angle.
*)

PROCEDURE rvel (id: CARDINAL; angle: REAL) : CARDINAL ;


(*
   fps - set frames per second.
*)

PROCEDURE fps (f: REAL) ;


(*
   replayRate - set frames per second during replay.
*)

PROCEDURE replayRate (f: REAL) ;


(*
   simulateFor - render for, t, seconds.
*)

PROCEDURE simulateFor (t: REAL) ;


(*
   getTime - returns the current time in the simulation.
*)

PROCEDURE getTime () : REAL ;


(*
   skipTime - attempts to skip, t, seconds.  It returns the amount
              of time actually skipped.  This function will not skip
              past the next event.
*)

PROCEDURE skipTime (t: REAL) : REAL ;


(*
   timeUntil - returns the relative time from now until the next event.
*)

PROCEDURE timeUntil () : REAL ;


(*
   processEvent - skips any outstanding time and processes the next event.
                  Time is adjusted to the time of the next event.
*)

PROCEDURE processEvent ;


(*
   isCollision - returns TRUE if the next event is a collision event.
*)

PROCEDURE isCollision () : BOOLEAN ;


(*
   isFrame - returns TRUE if the next event is a frame event.
*)

PROCEDURE isFrame () : BOOLEAN ;


(*
   isFunction - returns TRUE if the next event is a function event.
*)

PROCEDURE isFunction () : BOOLEAN ;


(*
   isSpring - returns TRUE if the next event is a spring event.
*)

PROCEDURE isSpring () : BOOLEAN ;


(*
   isFixed - returns TRUE if object, id, is fixed.
*)

PROCEDURE isFixed (id: CARDINAL) : BOOLEAN ;


(*
   createFunctionEvent - creates a function event at time, t,
                         in the future.  The function id is called
                         with parameter, param.  For example: id (param).
*)

PROCEDURE createFunctionEvent (t: REAL; id, param: CARDINAL) ;


(*
   rm - delete this object from the simulated world.
        The same id is returned.
*)

PROCEDURE rm (id: CARDINAL) : CARDINAL ;


(*
   getEventBuffer - collects the event buffer limits in the following parameters.
*)

PROCEDURE getEventBuffer (VAR start: ADDRESS; VAR length: CARDINAL; VAR used: CARDINAL) ;


(*
   buildFrame - populate the frame buffer contents with the world at the current time.
*)

PROCEDURE buildFrame ;


(*
   emptyCbuffer - empty the colour buffer.
*)

PROCEDURE emptyCbuffer ;


(*
   emptyFbuffer - empty the frame buffer.
*)

PROCEDURE emptyFbuffer ;


(*
   useTimeDelay - should the frame buffer include the time delay command?
*)

PROCEDURE useTimeDelay (on: BOOLEAN) ;


(*
   drawCollisionFrames - turn the drawing of collision frames on or off.
                         actual:   determines whether an extra frame is generated
                                   at the time of actual collision.
                         predict:  draws a frame predicting the next collision.
                                   It will show the points predicted to collide.
*)

PROCEDURE drawCollisionFrames (actual, predict: BOOLEAN) ;


(*
   setCollisionColour - assigns, c, as the colour for objects colliding.
*)

PROCEDURE setCollisionColour (c: Colour) ;


(*
   dumpWorld - dump a list of all objects and their characteristics.
*)

PROCEDURE dumpWorld ;


(*
   checkObjects - perform a check to make sure that all non fixed objects have a mass.
                  TRUE is returned if all moving objects have a mass.
*)

PROCEDURE checkObjects () : BOOLEAN ;


END twoDsim.
