/* do not edit automatically generated by mc from COROUTINES.  */
/* Library module defined by the International Standard
   Information technology - programming languages
   BS ISO/IEC 10514-1:1996E Part 1: Modula-2, Base Language.

   Copyright ISO/IEC (International Organization for Standardization
   and International Electrotechnical Commission) 1996-2020.

   It may be freely copied for the purpose of implementation (see page
   707 of the Information technology - Programming languages Part 1:
   Modula-2, Base Language.  BS ISO/IEC 10514-1:1996).  */


#if !defined (_COROUTINES_H)
#   define _COROUTINES_H

#   ifdef __cplusplus
extern "C" {
#   endif
#   if !defined (PROC_D)
#      define PROC_D
       typedef void (*PROC_t) (void);
       typedef struct { PROC_t proc; } PROC;
#   endif

#   include "GSYSTEM.h"

#   if defined (_COROUTINES_C)
#      define EXTERN
#   else
#      define EXTERN extern
#   endif

#   define COROUTINES_UnassignedPriority 0
#if !defined (COROUTINES_COROUTINE_D)
#  define COROUTINES_COROUTINE_D
   typedef void *COROUTINES_COROUTINE;
#endif

typedef unsigned int COROUTINES_INTERRUPTSOURCE;

typedef unsigned int COROUTINES_PROTECTION;

EXTERN void COROUTINES_NEWCOROUTINE (PROC procBody, void * workspace, unsigned int size, COROUTINES_COROUTINE *cr, COROUTINES_PROTECTION initProtection);
EXTERN void COROUTINES_TRANSFER (COROUTINES_COROUTINE *from, COROUTINES_COROUTINE to);
EXTERN void COROUTINES_IOTRANSFER (COROUTINES_COROUTINE *from, COROUTINES_COROUTINE to);
EXTERN void COROUTINES_ATTACH (COROUTINES_INTERRUPTSOURCE source);
EXTERN void COROUTINES_DETACH (COROUTINES_INTERRUPTSOURCE source);
EXTERN unsigned int COROUTINES_IsATTACHED (COROUTINES_INTERRUPTSOURCE source);
EXTERN COROUTINES_COROUTINE COROUTINES_HANDLER (COROUTINES_INTERRUPTSOURCE source);
EXTERN COROUTINES_COROUTINE COROUTINES_CURRENT (void);
EXTERN void COROUTINES_LISTEN (COROUTINES_PROTECTION p);
EXTERN COROUTINES_PROTECTION COROUTINES_PROT (void);

/*
   TurnInterrupts - switches processor interrupts to the protection
                    level, to.  It returns the old value.
*/

EXTERN COROUTINES_PROTECTION COROUTINES_TurnInterrupts (COROUTINES_PROTECTION to);

/*
   ListenLoop - should be called instead of users writing:

                LOOP
                   LISTEN
                END

                It performs the same function but yields
                control back to the underlying operating system.
                It also checks for deadlock.
                Note that this function does return when an interrupt occurs.
                (File descriptor becomes ready or time event expires).
*/

EXTERN void COROUTINES_ListenLoop (void);
#   ifdef __cplusplus
}
#   endif

#   undef EXTERN
#endif
